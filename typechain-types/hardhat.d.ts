/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20SnapshotUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20SnapshotUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Snapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Snapshot__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "DappsStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DappsStaking__factory>;
    getContractFactory(
      name: "IDNT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNT__factory>;
    getContractFactory(
      name: "IDNTMultiTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNTMultiTransfer__factory>;
    getContractFactory(
      name: "ILiquidStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidStaking__factory>;
    getContractFactory(
      name: "IPartnerHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPartnerHandler__factory>;
    getContractFactory(
      name: "LiquidStaking1_5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidStaking1_5__factory>;
    getContractFactory(
      name: "MockDapp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockDapp__factory>;
    getContractFactory(
      name: "NASTR1_5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NASTR1_5__factory>;
    getContractFactory(
      name: "NDistributor1_5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NDistributor1_5__factory>;
    getContractFactory(
      name: "DappsStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DappsStaking__factory>;
    getContractFactory(
      name: "IDNT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNT__factory>;
    getContractFactory(
      name: "ILiquidStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidStaking__factory>;
    getContractFactory(
      name: "INDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INDistributor__factory>;
    getContractFactory(
      name: "IPartnerHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPartnerHandler__factory>;
    getContractFactory(
      name: "LiquidStakingOld",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidStakingOld__factory>;
    getContractFactory(
      name: "NASTROld",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NASTROld__factory>;
    getContractFactory(
      name: "NDistributorOld",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NDistributorOld__factory>;
    getContractFactory(
      name: "DappsStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DappsStaking__factory>;
    getContractFactory(
      name: "IDNT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNT__factory>;
    getContractFactory(
      name: "IDNTMultiTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNTMultiTransfer__factory>;
    getContractFactory(
      name: "ILiquidStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidStaking__factory>;
    getContractFactory(
      name: "IPartnerHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPartnerHandler__factory>;
    getContractFactory(
      name: "LiquidStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidStaking__factory>;
    getContractFactory(
      name: "NASTR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NASTR__factory>;
    getContractFactory(
      name: "NDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NDistributor__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "ERC20SnapshotUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20SnapshotUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Snapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Snapshot>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "DappsStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DappsStaking>;
    getContractAt(
      name: "IDNT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNT>;
    getContractAt(
      name: "IDNTMultiTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNTMultiTransfer>;
    getContractAt(
      name: "ILiquidStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidStaking>;
    getContractAt(
      name: "IPartnerHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPartnerHandler>;
    getContractAt(
      name: "LiquidStaking1_5",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidStaking1_5>;
    getContractAt(
      name: "MockDapp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockDapp>;
    getContractAt(
      name: "NASTR1_5",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NASTR1_5>;
    getContractAt(
      name: "NDistributor1_5",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NDistributor1_5>;
    getContractAt(
      name: "DappsStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DappsStaking>;
    getContractAt(
      name: "IDNT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNT>;
    getContractAt(
      name: "ILiquidStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidStaking>;
    getContractAt(
      name: "INDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INDistributor>;
    getContractAt(
      name: "IPartnerHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPartnerHandler>;
    getContractAt(
      name: "LiquidStakingOld",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidStakingOld>;
    getContractAt(
      name: "NASTROld",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NASTROld>;
    getContractAt(
      name: "NDistributorOld",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NDistributorOld>;
    getContractAt(
      name: "DappsStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DappsStaking>;
    getContractAt(
      name: "IDNT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNT>;
    getContractAt(
      name: "IDNTMultiTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNTMultiTransfer>;
    getContractAt(
      name: "ILiquidStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidStaking>;
    getContractAt(
      name: "IPartnerHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPartnerHandler>;
    getContractAt(
      name: "LiquidStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidStaking>;
    getContractAt(
      name: "NASTR",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NASTR>;
    getContractAt(
      name: "NDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NDistributor>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
