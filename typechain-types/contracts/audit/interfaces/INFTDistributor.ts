/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface INFTDistributorInterface extends utils.Interface {
  functions: {
    "getBestUtilFee(string,uint8)": FunctionFragment;
    "getDefaultUserFee(address)": FunctionFragment;
    "getEra(uint256)": FunctionFragment;
    "getErasData(uint256,uint256)": FunctionFragment;
    "getUserEraBalance(string,address,uint256)": FunctionFragment;
    "getUserEraFee(address,uint256)": FunctionFragment;
    "getUserFee(string,address)": FunctionFragment;
    "isUnique(string)": FunctionFragment;
    "updateUser(string,address,uint256,uint256)": FunctionFragment;
    "updateUserFee(address,uint8,uint256)": FunctionFragment;
    "updates()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBestUtilFee"
      | "getDefaultUserFee"
      | "getEra"
      | "getErasData"
      | "getUserEraBalance"
      | "getUserEraFee"
      | "getUserFee"
      | "isUnique"
      | "updateUser"
      | "updateUserFee"
      | "updates"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBestUtilFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultUserFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEra",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getErasData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEraBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEraFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFee",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnique",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "updates", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getBestUtilFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultUserFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEra", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getErasData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEraBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEraFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUserFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUnique", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updates", data: BytesLike): Result;

  events: {};
}

export interface INFTDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INFTDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBestUtilFee(
      utility: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDefaultUserFee(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getEra(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    getErasData(
      eraBegin: PromiseOrValue<BigNumberish>,
      eraEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUserEraBalance(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getUserEraFee(
      user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUserFee(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isUnique(
      utility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateUser(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUserFee(
      user: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updates(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getBestUtilFee(
    utility: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getDefaultUserFee(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getEra(
    era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getErasData(
    eraBegin: PromiseOrValue<BigNumberish>,
    eraEnd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUserEraBalance(
    utility: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getUserEraFee(
    user: PromiseOrValue<string>,
    era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getUserFee(
    utility: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  isUnique(
    utility: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateUser(
    utility: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    era: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUserFee(
    user: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    era: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updates(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBestUtilFee(
      utility: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getDefaultUserFee(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getEra(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getErasData(
      eraBegin: PromiseOrValue<BigNumberish>,
      eraEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getUserEraBalance(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getUserEraFee(
      user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getUserFee(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    isUnique(
      utility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateUser(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserFee(
      user: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updates(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getBestUtilFee(
      utility: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultUserFee(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEra(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getErasData(
      eraBegin: PromiseOrValue<BigNumberish>,
      eraEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUserEraBalance(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserEraFee(
      user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserFee(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnique(
      utility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateUser(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUserFee(
      user: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updates(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBestUtilFee(
      utility: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultUserFee(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEra(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getErasData(
      eraBegin: PromiseOrValue<BigNumberish>,
      eraEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUserEraBalance(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserEraFee(
      user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserFee(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnique(
      utility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateUser(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUserFee(
      user: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updates(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
