/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface NDistributorInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MANAGER()": FunctionFragment;
    "addDnt(string,address)": FunctionFragment;
    "addManager(address)": FunctionFragment;
    "addUtility(string)": FunctionFragment;
    "addUtilityToDisallowList(string)": FunctionFragment;
    "assignUtilityFromNull(address,uint256,string,string)": FunctionFragment;
    "changeDntAddress(string,address)": FunctionFragment;
    "changeManagerAddress(address,address)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "disallowList(string)": FunctionFragment;
    "dntContracts(string)": FunctionFragment;
    "dntDB(uint256)": FunctionFragment;
    "dntId(string)": FunctionFragment;
    "dnts(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUserDntBalance(address,string)": FunctionFragment;
    "getUserDntBalanceInUtil(address,string,string)": FunctionFragment;
    "getUserUtilsInDnt(address,string)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize2()": FunctionFragment;
    "isUtility(string)": FunctionFragment;
    "issueDnt(address,uint256,string,string)": FunctionFragment;
    "listDnts()": FunctionFragment;
    "listManagers()": FunctionFragment;
    "listUserDntInUtils(address,string)": FunctionFragment;
    "listUserDnts(address)": FunctionFragment;
    "listUserUtilitiesInDnt(address,string)": FunctionFragment;
    "listUtilities()": FunctionFragment;
    "managerIds(address)": FunctionFragment;
    "managers(uint256)": FunctionFragment;
    "multiTransferDnts(address,address,uint256[],string[],string)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeDnt(address,uint256,string,string)": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setDntStatus(uint256,bool)": FunctionFragment;
    "setLiquidStaking(address)": FunctionFragment;
    "setUtilityStatus(uint256,bool)": FunctionFragment;
    "setup()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalDnt(string)": FunctionFragment;
    "totalDntInUtil(string)": FunctionFragment;
    "transferDnt(address,address,uint256,string,string)": FunctionFragment;
    "transferDntContractOwnership(address,string)": FunctionFragment;
    "transferDnts(address,address,uint256,string)": FunctionFragment;
    "userDntsIdx(address,string)": FunctionFragment;
    "userHasDnt(address,string)": FunctionFragment;
    "userHasUtility(address,string)": FunctionFragment;
    "userUtitliesIdx(address,string)": FunctionFragment;
    "utilities(uint256)": FunctionFragment;
    "utilityDB(uint256)": FunctionFragment;
    "utilityId(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER"
      | "addDnt"
      | "addManager"
      | "addUtility"
      | "addUtilityToDisallowList"
      | "assignUtilityFromNull"
      | "changeDntAddress"
      | "changeManagerAddress"
      | "changeOwner"
      | "disallowList"
      | "dntContracts"
      | "dntDB"
      | "dntId"
      | "dnts"
      | "getRoleAdmin"
      | "getUserDntBalance"
      | "getUserDntBalanceInUtil"
      | "getUserUtilsInDnt"
      | "grantRole"
      | "hasRole"
      | "initialize2"
      | "isUtility"
      | "issueDnt"
      | "listDnts"
      | "listManagers"
      | "listUserDntInUtils"
      | "listUserDnts"
      | "listUserUtilitiesInDnt"
      | "listUtilities"
      | "managerIds"
      | "managers"
      | "multiTransferDnts"
      | "owner"
      | "removeDnt"
      | "removeManager"
      | "renounceRole"
      | "revokeRole"
      | "setDntStatus"
      | "setLiquidStaking"
      | "setUtilityStatus"
      | "setup"
      | "supportsInterface"
      | "totalDnt"
      | "totalDntInUtil"
      | "transferDnt"
      | "transferDntContractOwnership"
      | "transferDnts"
      | "userDntsIdx"
      | "userHasDnt"
      | "userHasUtility"
      | "userUtitliesIdx"
      | "utilities"
      | "utilityDB"
      | "utilityId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MANAGER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addDnt",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addUtility",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addUtilityToDisallowList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assignUtilityFromNull",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDntAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeManagerAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dntContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dntDB",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dntId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dnts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDntBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDntBalanceInUtil",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUtilsInDnt",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUtility",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "issueDnt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "listDnts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listManagers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listUserDntInUtils",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listUserDnts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listUserUtilitiesInDnt",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listUtilities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "multiTransferDnts",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeDnt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDntStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidStaking",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUtilityStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "setup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDnt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDntInUtil",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDnt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDntContractOwnership",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDnts",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userDntsIdx",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasDnt",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasUtility",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userUtitliesIdx",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "utilities",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "utilityDB",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "utilityId",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MANAGER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDnt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUtility", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addUtilityToDisallowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignUtilityFromNull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDntAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dntContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dntDB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dntId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dnts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDntBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDntBalanceInUtil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUtilsInDnt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUtility", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issueDnt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listDnts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listUserDntInUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listUserDnts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listUserUtilitiesInDnt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listUtilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managerIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiTransferDnts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeDnt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDntStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDnt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDntInUtil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDnt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDntContractOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDnts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDntsIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userHasDnt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userHasUtility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUtitliesIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "utilities", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "utilityDB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "utilityId", data: BytesLike): Result;

  events: {
    "AddDnt(string,address)": EventFragment;
    "AddUtility(string)": EventFragment;
    "ChangeDntAddress(string,address)": EventFragment;
    "IssueDnt(address,uint256,string,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetDntStatus(uint256,bool,string)": EventFragment;
    "SetLiquidStaking(address)": EventFragment;
    "SetUtilityStatus(uint256,bool,string)": EventFragment;
    "Transfer(address,address,uint256,string,string)": EventFragment;
    "TransferDntContractOwnership(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddDnt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddUtility"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeDntAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssueDnt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDntStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidStaking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUtilityStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferDntContractOwnership"
  ): EventFragment;
}

export interface AddDntEventObject {
  newDnt: string;
  dntAddress: string;
}
export type AddDntEvent = TypedEvent<[string, string], AddDntEventObject>;

export type AddDntEventFilter = TypedEventFilter<AddDntEvent>;

export interface AddUtilityEventObject {
  newUtility: string;
}
export type AddUtilityEvent = TypedEvent<[string], AddUtilityEventObject>;

export type AddUtilityEventFilter = TypedEventFilter<AddUtilityEvent>;

export interface ChangeDntAddressEventObject {
  dnt: string;
  addr: string;
}
export type ChangeDntAddressEvent = TypedEvent<
  [string, string],
  ChangeDntAddressEventObject
>;

export type ChangeDntAddressEventFilter =
  TypedEventFilter<ChangeDntAddressEvent>;

export interface IssueDntEventObject {
  _to: string;
  _amount: BigNumber;
  _utility: string;
  _dnt: string;
}
export type IssueDntEvent = TypedEvent<
  [string, BigNumber, string, string],
  IssueDntEventObject
>;

export type IssueDntEventFilter = TypedEventFilter<IssueDntEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetDntStatusEventObject {
  id: BigNumber;
  state: boolean;
  dntName: string;
}
export type SetDntStatusEvent = TypedEvent<
  [BigNumber, boolean, string],
  SetDntStatusEventObject
>;

export type SetDntStatusEventFilter = TypedEventFilter<SetDntStatusEvent>;

export interface SetLiquidStakingEventObject {
  liquidStakingAddress: string;
}
export type SetLiquidStakingEvent = TypedEvent<
  [string],
  SetLiquidStakingEventObject
>;

export type SetLiquidStakingEventFilter =
  TypedEventFilter<SetLiquidStakingEvent>;

export interface SetUtilityStatusEventObject {
  id: BigNumber;
  state: boolean;
  utilityName: string;
}
export type SetUtilityStatusEvent = TypedEvent<
  [BigNumber, boolean, string],
  SetUtilityStatusEventObject
>;

export type SetUtilityStatusEventFilter =
  TypedEventFilter<SetUtilityStatusEvent>;

export interface TransferEventObject {
  _from: string;
  _to: string;
  _amount: BigNumber;
  _utility: string;
  _dnt: string;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferDntContractOwnershipEventObject {
  to: string;
  dnt: string;
}
export type TransferDntContractOwnershipEvent = TypedEvent<
  [string, string],
  TransferDntContractOwnershipEventObject
>;

export type TransferDntContractOwnershipEventFilter =
  TypedEventFilter<TransferDntContractOwnershipEvent>;

export interface NDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER(overrides?: CallOverrides): Promise<[string]>;

    addDnt(
      _newDnt: PromiseOrValue<string>,
      _dntAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManager(
      _newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUtility(
      _newUtility: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUtilityToDisallowList(
      _utility: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assignUtilityFromNull(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _newUtility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeDntAddress(
      _dnt: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeManagerAddress(
      _oldAddress: PromiseOrValue<string>,
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disallowList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dntContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    dntDB(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { dntName: string; isActive: boolean }>;

    dntId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dnts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserDntBalance(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUserDntBalanceInUtil(
      _user: PromiseOrValue<string>,
      _util: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserUtilsInDnt(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isUtility(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueDnt(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listDnts(overrides?: CallOverrides): Promise<[string[]]>;

    listManagers(overrides?: CallOverrides): Promise<[string[]]>;

    listUserDntInUtils(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    listUserDnts(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    listUserUtilitiesInDnt(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    listUtilities(overrides?: CallOverrides): Promise<[string[]]>;

    managerIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    managers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    multiTransferDnts(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>[],
      _utilities: PromiseOrValue<string>[],
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeDnt(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDntStatus(
      _id: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidStaking(
      _liquidStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUtilityStatus(
      _id: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setup(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalDnt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalDntInUtil(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferDnt(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferDntContractOwnership(
      _to: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferDnts(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userDntsIdx(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userHasDnt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasUtility(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userUtitliesIdx(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    utilities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    utilityDB(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { utilityName: string; isActive: boolean }>;

    utilityId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER(overrides?: CallOverrides): Promise<string>;

  addDnt(
    _newDnt: PromiseOrValue<string>,
    _dntAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManager(
    _newManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUtility(
    _newUtility: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUtilityToDisallowList(
    _utility: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assignUtilityFromNull(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _newUtility: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeDntAddress(
    _dnt: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeManagerAddress(
    _oldAddress: PromiseOrValue<string>,
    _newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOwner(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disallowList(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dntContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  dntDB(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { dntName: string; isActive: boolean }>;

  dntId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dnts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserDntBalance(
    _user: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUserDntBalanceInUtil(
    _user: PromiseOrValue<string>,
    _util: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserUtilsInDnt(
    _user: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isUtility(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueDnt(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _utility: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listDnts(overrides?: CallOverrides): Promise<string[]>;

  listManagers(overrides?: CallOverrides): Promise<string[]>;

  listUserDntInUtils(
    _user: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  listUserDnts(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listUserUtilitiesInDnt(
    _user: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listUtilities(overrides?: CallOverrides): Promise<string[]>;

  managerIds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  managers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  multiTransferDnts(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amounts: PromiseOrValue<BigNumberish>[],
    _utilities: PromiseOrValue<string>[],
    _dnt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeDnt(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _utility: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeManager(
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDntStatus(
    _id: PromiseOrValue<BigNumberish>,
    _state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidStaking(
    _liquidStaking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUtilityStatus(
    _id: PromiseOrValue<BigNumberish>,
    _state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setup(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalDnt(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalDntInUtil(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferDnt(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _utility: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferDntContractOwnership(
    _to: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferDnts(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _dnt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userDntsIdx(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userHasDnt(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasUtility(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userUtitliesIdx(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  utilities(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  utilityDB(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { utilityName: string; isActive: boolean }>;

  utilityId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER(overrides?: CallOverrides): Promise<string>;

    addDnt(
      _newDnt: PromiseOrValue<string>,
      _dntAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addManager(
      _newManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUtility(
      _newUtility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUtilityToDisallowList(
      _utility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    assignUtilityFromNull(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _newUtility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDntAddress(
      _dnt: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeManagerAddress(
      _oldAddress: PromiseOrValue<string>,
      _newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    disallowList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dntContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    dntDB(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { dntName: string; isActive: boolean }>;

    dntId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dnts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserDntBalance(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDntBalanceInUtil(
      _user: PromiseOrValue<string>,
      _util: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUtilsInDnt(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize2(overrides?: CallOverrides): Promise<void>;

    isUtility(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueDnt(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listDnts(overrides?: CallOverrides): Promise<string[]>;

    listManagers(overrides?: CallOverrides): Promise<string[]>;

    listUserDntInUtils(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    listUserDnts(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listUserUtilitiesInDnt(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listUtilities(overrides?: CallOverrides): Promise<string[]>;

    managerIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    multiTransferDnts(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>[],
      _utilities: PromiseOrValue<string>[],
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeDnt(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDntStatus(
      _id: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidStaking(
      _liquidStaking: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUtilityStatus(
      _id: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setup(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalDnt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDntInUtil(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferDnt(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferDntContractOwnership(
      _to: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferDnts(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    userDntsIdx(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasDnt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasUtility(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userUtitliesIdx(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    utilityDB(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { utilityName: string; isActive: boolean }>;

    utilityId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddDnt(string,address)"(
      newDnt?: PromiseOrValue<string> | null,
      dntAddress?: PromiseOrValue<string> | null
    ): AddDntEventFilter;
    AddDnt(
      newDnt?: PromiseOrValue<string> | null,
      dntAddress?: PromiseOrValue<string> | null
    ): AddDntEventFilter;

    "AddUtility(string)"(
      newUtility?: PromiseOrValue<string> | null
    ): AddUtilityEventFilter;
    AddUtility(
      newUtility?: PromiseOrValue<string> | null
    ): AddUtilityEventFilter;

    "ChangeDntAddress(string,address)"(
      dnt?: PromiseOrValue<string> | null,
      addr?: PromiseOrValue<string> | null
    ): ChangeDntAddressEventFilter;
    ChangeDntAddress(
      dnt?: PromiseOrValue<string> | null,
      addr?: PromiseOrValue<string> | null
    ): ChangeDntAddressEventFilter;

    "IssueDnt(address,uint256,string,string)"(
      _to?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null,
      _utility?: null,
      _dnt?: PromiseOrValue<string> | null
    ): IssueDntEventFilter;
    IssueDnt(
      _to?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null,
      _utility?: null,
      _dnt?: PromiseOrValue<string> | null
    ): IssueDntEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetDntStatus(uint256,bool,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      state?: PromiseOrValue<boolean> | null,
      dntName?: PromiseOrValue<string> | null
    ): SetDntStatusEventFilter;
    SetDntStatus(
      id?: PromiseOrValue<BigNumberish> | null,
      state?: PromiseOrValue<boolean> | null,
      dntName?: PromiseOrValue<string> | null
    ): SetDntStatusEventFilter;

    "SetLiquidStaking(address)"(
      liquidStakingAddress?: PromiseOrValue<string> | null
    ): SetLiquidStakingEventFilter;
    SetLiquidStaking(
      liquidStakingAddress?: PromiseOrValue<string> | null
    ): SetLiquidStakingEventFilter;

    "SetUtilityStatus(uint256,bool,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      state?: PromiseOrValue<boolean> | null,
      utilityName?: PromiseOrValue<string> | null
    ): SetUtilityStatusEventFilter;
    SetUtilityStatus(
      id?: PromiseOrValue<BigNumberish> | null,
      state?: PromiseOrValue<boolean> | null,
      utilityName?: PromiseOrValue<string> | null
    ): SetUtilityStatusEventFilter;

    "Transfer(address,address,uint256,string,string)"(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null,
      _utility?: null,
      _dnt?: PromiseOrValue<string> | null
    ): TransferEventFilter;
    Transfer(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null,
      _utility?: null,
      _dnt?: PromiseOrValue<string> | null
    ): TransferEventFilter;

    "TransferDntContractOwnership(address,string)"(
      to?: PromiseOrValue<string> | null,
      dnt?: PromiseOrValue<string> | null
    ): TransferDntContractOwnershipEventFilter;
    TransferDntContractOwnership(
      to?: PromiseOrValue<string> | null,
      dnt?: PromiseOrValue<string> | null
    ): TransferDntContractOwnershipEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    addDnt(
      _newDnt: PromiseOrValue<string>,
      _dntAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManager(
      _newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUtility(
      _newUtility: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUtilityToDisallowList(
      _utility: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assignUtilityFromNull(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _newUtility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeDntAddress(
      _dnt: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeManagerAddress(
      _oldAddress: PromiseOrValue<string>,
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disallowList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dntContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dntDB(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dntId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dnts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDntBalance(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUserDntBalanceInUtil(
      _user: PromiseOrValue<string>,
      _util: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUtilsInDnt(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isUtility(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueDnt(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listDnts(overrides?: CallOverrides): Promise<BigNumber>;

    listManagers(overrides?: CallOverrides): Promise<BigNumber>;

    listUserDntInUtils(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listUserDnts(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listUserUtilitiesInDnt(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listUtilities(overrides?: CallOverrides): Promise<BigNumber>;

    managerIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiTransferDnts(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>[],
      _utilities: PromiseOrValue<string>[],
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeDnt(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDntStatus(
      _id: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidStaking(
      _liquidStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUtilityStatus(
      _id: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setup(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDnt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDntInUtil(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferDnt(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferDntContractOwnership(
      _to: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferDnts(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userDntsIdx(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasDnt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasUtility(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userUtitliesIdx(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilityDB(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilityId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDnt(
      _newDnt: PromiseOrValue<string>,
      _dntAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManager(
      _newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUtility(
      _newUtility: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUtilityToDisallowList(
      _utility: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assignUtilityFromNull(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _newUtility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeDntAddress(
      _dnt: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeManagerAddress(
      _oldAddress: PromiseOrValue<string>,
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disallowList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dntContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dntDB(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dntId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dnts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDntBalance(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUserDntBalanceInUtil(
      _user: PromiseOrValue<string>,
      _util: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUtilsInDnt(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isUtility(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueDnt(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listDnts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listManagers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listUserDntInUtils(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listUserDnts(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listUserUtilitiesInDnt(
      _user: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listUtilities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiTransferDnts(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>[],
      _utilities: PromiseOrValue<string>[],
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeDnt(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDntStatus(
      _id: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidStaking(
      _liquidStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUtilityStatus(
      _id: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setup(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDnt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDntInUtil(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferDnt(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _utility: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferDntContractOwnership(
      _to: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferDnts(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userDntsIdx(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasDnt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasUtility(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userUtitliesIdx(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilityDB(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilityId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
