/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface NFTDistributorInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "LIQUIDSTAKING_FEE()": FunctionFragment;
    "MANAGER()": FunctionFragment;
    "TOKEN_CONTRACT()": FunctionFragment;
    "adaptersDistributor()": FunctionFragment;
    "addManager(address)": FunctionFragment;
    "addUtility(address,uint8,bool)": FunctionFragment;
    "distr()": FunctionFragment;
    "getBestUtilFee(string,uint8)": FunctionFragment;
    "getDefaultUserFee(address)": FunctionFragment;
    "getEra(uint256)": FunctionFragment;
    "getEraAmount(uint256)": FunctionFragment;
    "getErasData(uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUserEraAmount(string,address,uint256)": FunctionFragment;
    "getUserEraBalance(string,address,uint256)": FunctionFragment;
    "getUserEraFee(address,uint256)": FunctionFragment;
    "getUserFee(string,address)": FunctionFragment;
    "getUserInfo(address)": FunctionFragment;
    "getUserNfts(address)": FunctionFragment;
    "getUtilAmount(string,uint256)": FunctionFragment;
    "getUtilsList()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "haveUtil(string)": FunctionFragment;
    "isUnique(string)": FunctionFragment;
    "liquidStaking()": FunctionFragment;
    "multiTransferDnt(string[],address,address,uint256[])": FunctionFragment;
    "nAstr()": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "removeUtility(string)": FunctionFragment;
    "removeUtilityByAddress(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferDnt(string,address,address,uint256)": FunctionFragment;
    "transferNft(string,address,address,uint256)": FunctionFragment;
    "updateUser(string,address,uint256,uint256)": FunctionFragment;
    "updateUserFee(address,uint8,uint256)": FunctionFragment;
    "updates()": FunctionFragment;
    "users(address)": FunctionFragment;
    "utilId(string)": FunctionFragment;
    "utils(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "LIQUIDSTAKING_FEE"
      | "MANAGER"
      | "TOKEN_CONTRACT"
      | "adaptersDistributor"
      | "addManager"
      | "addUtility"
      | "distr"
      | "getBestUtilFee"
      | "getDefaultUserFee"
      | "getEra"
      | "getEraAmount"
      | "getErasData"
      | "getRoleAdmin"
      | "getUserEraAmount"
      | "getUserEraBalance"
      | "getUserEraFee"
      | "getUserFee"
      | "getUserInfo"
      | "getUserNfts"
      | "getUtilAmount"
      | "getUtilsList"
      | "grantRole"
      | "hasRole"
      | "haveUtil"
      | "isUnique"
      | "liquidStaking"
      | "multiTransferDnt"
      | "nAstr"
      | "removeManager"
      | "removeUtility"
      | "removeUtilityByAddress"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "transferDnt"
      | "transferNft"
      | "updateUser"
      | "updateUserFee"
      | "updates"
      | "users"
      | "utilId"
      | "utils"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDSTAKING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MANAGER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOKEN_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adaptersDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addUtility",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "distr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBestUtilFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultUserFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEra",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEraAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getErasData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEraAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEraBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEraFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFee",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNfts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "haveUtil",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnique",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiTransferDnt",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "nAstr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUtility",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUtilityByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDnt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNft",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "updates", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "utilId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "utils",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDSTAKING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MANAGER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adaptersDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUtility", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBestUtilFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultUserFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEra", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEraAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getErasData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEraAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEraBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEraFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUserFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "haveUtil", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUnique", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiTransferDnt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nAstr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUtility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUtilityByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDnt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "utilId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "utils", data: BytesLike): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface NFTDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDSTAKING_FEE(overrides?: CallOverrides): Promise<[number]>;

    MANAGER(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    adaptersDistributor(overrides?: CallOverrides): Promise<[string]>;

    addManager(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUtility(
      _contractAddress: PromiseOrValue<string>,
      _rewardFee: PromiseOrValue<BigNumberish>,
      _isUnique: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distr(overrides?: CallOverrides): Promise<[string]>;

    getBestUtilFee(
      utility: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDefaultUserFee(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getEra(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    getEraAmount(
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber], boolean, BigNumber]>;

    getErasData(
      eraBegin: PromiseOrValue<BigNumberish>,
      eraEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserEraAmount(
      _util: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getUserEraBalance(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getUserEraFee(
      user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUserFee(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUserInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, BigNumber]>;

    getUserNfts(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getUtilAmount(
      _util: PromiseOrValue<string>,
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean, BigNumber]>;

    getUtilsList(overrides?: CallOverrides): Promise<[string[]]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    haveUtil(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUnique(
      utility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidStaking(overrides?: CallOverrides): Promise<[string]>;

    multiTransferDnt(
      utilities: PromiseOrValue<string>[],
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nAstr(overrides?: CallOverrides): Promise<[string]>;

    removeManager(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeUtility(
      _utilName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeUtilityByAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferDnt(
      utility: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferNft(
      utility: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUser(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUserFee(
      user: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updates(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        defaultUserFee: number;
        totalUniqueBalance: BigNumber;
        totalUniqueComission: BigNumber;
      }
    >;

    utilId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    utils(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string, BigNumber, BigNumber] & {
        isUnique: boolean;
        rewardFee: number;
        contractAddress: string;
        totalAmount: BigNumber;
        updatedEra: BigNumber;
      }
    >;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  LIQUIDSTAKING_FEE(overrides?: CallOverrides): Promise<number>;

  MANAGER(overrides?: CallOverrides): Promise<string>;

  TOKEN_CONTRACT(overrides?: CallOverrides): Promise<string>;

  adaptersDistributor(overrides?: CallOverrides): Promise<string>;

  addManager(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUtility(
    _contractAddress: PromiseOrValue<string>,
    _rewardFee: PromiseOrValue<BigNumberish>,
    _isUnique: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distr(overrides?: CallOverrides): Promise<string>;

  getBestUtilFee(
    utility: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getDefaultUserFee(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getEra(
    era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getEraAmount(
    _era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[[BigNumber, BigNumber], boolean, BigNumber]>;

  getErasData(
    eraBegin: PromiseOrValue<BigNumberish>,
    eraEnd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserEraAmount(
    _util: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getUserEraBalance(
    utility: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getUserEraFee(
    user: PromiseOrValue<string>,
    era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getUserFee(
    utility: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getUserInfo(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber, BigNumber]>;

  getUserNfts(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  getUtilAmount(
    _util: PromiseOrValue<string>,
    _era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, boolean, BigNumber]>;

  getUtilsList(overrides?: CallOverrides): Promise<string[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  haveUtil(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUnique(
    utility: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidStaking(overrides?: CallOverrides): Promise<string>;

  multiTransferDnt(
    utilities: PromiseOrValue<string>[],
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nAstr(overrides?: CallOverrides): Promise<string>;

  removeManager(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeUtility(
    _utilName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeUtilityByAddress(
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferDnt(
    utility: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferNft(
    utility: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUser(
    utility: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    era: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUserFee(
    user: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    era: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updates(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      defaultUserFee: number;
      totalUniqueBalance: BigNumber;
      totalUniqueComission: BigNumber;
    }
  >;

  utilId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  utils(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, string, BigNumber, BigNumber] & {
      isUnique: boolean;
      rewardFee: number;
      contractAddress: string;
      totalAmount: BigNumber;
      updatedEra: BigNumber;
    }
  >;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    LIQUIDSTAKING_FEE(overrides?: CallOverrides): Promise<number>;

    MANAGER(overrides?: CallOverrides): Promise<string>;

    TOKEN_CONTRACT(overrides?: CallOverrides): Promise<string>;

    adaptersDistributor(overrides?: CallOverrides): Promise<string>;

    addManager(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUtility(
      _contractAddress: PromiseOrValue<string>,
      _rewardFee: PromiseOrValue<BigNumberish>,
      _isUnique: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    distr(overrides?: CallOverrides): Promise<string>;

    getBestUtilFee(
      utility: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getDefaultUserFee(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getEra(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getEraAmount(
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber], boolean, BigNumber]>;

    getErasData(
      eraBegin: PromiseOrValue<BigNumberish>,
      eraEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserEraAmount(
      _util: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getUserEraBalance(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getUserEraFee(
      user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getUserFee(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getUserInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, BigNumber]>;

    getUserNfts(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getUtilAmount(
      _util: PromiseOrValue<string>,
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean, BigNumber]>;

    getUtilsList(overrides?: CallOverrides): Promise<string[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    haveUtil(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUnique(
      utility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidStaking(overrides?: CallOverrides): Promise<string>;

    multiTransferDnt(
      utilities: PromiseOrValue<string>[],
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    nAstr(overrides?: CallOverrides): Promise<string>;

    removeManager(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUtility(
      _utilName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUtilityByAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferDnt(
      utility: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferNft(
      utility: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUser(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserFee(
      user: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updates(overrides?: CallOverrides): Promise<void>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        defaultUserFee: number;
        totalUniqueBalance: BigNumber;
        totalUniqueComission: BigNumber;
      }
    >;

    utilId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utils(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string, BigNumber, BigNumber] & {
        isUnique: boolean;
        rewardFee: number;
        contractAddress: string;
        totalAmount: BigNumber;
        updatedEra: BigNumber;
      }
    >;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDSTAKING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    adaptersDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    addManager(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUtility(
      _contractAddress: PromiseOrValue<string>,
      _rewardFee: PromiseOrValue<BigNumberish>,
      _isUnique: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distr(overrides?: CallOverrides): Promise<BigNumber>;

    getBestUtilFee(
      utility: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultUserFee(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEra(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEraAmount(
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getErasData(
      eraBegin: PromiseOrValue<BigNumberish>,
      eraEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserEraAmount(
      _util: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserEraBalance(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserEraFee(
      user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserFee(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNfts(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilAmount(
      _util: PromiseOrValue<string>,
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilsList(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    haveUtil(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnique(
      utility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidStaking(overrides?: CallOverrides): Promise<BigNumber>;

    multiTransferDnt(
      utilities: PromiseOrValue<string>[],
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nAstr(overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeUtility(
      _utilName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeUtilityByAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferDnt(
      utility: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferNft(
      utility: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUser(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUserFee(
      user: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updates(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utils(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDSTAKING_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adaptersDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addManager(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUtility(
      _contractAddress: PromiseOrValue<string>,
      _rewardFee: PromiseOrValue<BigNumberish>,
      _isUnique: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBestUtilFee(
      utility: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultUserFee(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEra(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEraAmount(
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getErasData(
      eraBegin: PromiseOrValue<BigNumberish>,
      eraEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserEraAmount(
      _util: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserEraBalance(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserEraFee(
      user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserFee(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNfts(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilAmount(
      _util: PromiseOrValue<string>,
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    haveUtil(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnique(
      utility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiTransferDnt(
      utilities: PromiseOrValue<string>[],
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nAstr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeManager(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeUtility(
      _utilName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeUtilityByAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferDnt(
      utility: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferNft(
      utility: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUser(
      utility: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      era: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUserFee(
      user: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      era: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updates(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utils(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
