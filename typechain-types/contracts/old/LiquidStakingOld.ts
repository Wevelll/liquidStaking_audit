/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace LiquidStakingOld {
  export type WithdrawalStruct = {
    val: PromiseOrValue<BigNumberish>;
    eraReq: PromiseOrValue<BigNumberish>;
    lag: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawalStructOutput = [BigNumber, BigNumber, BigNumber] & {
    val: BigNumber;
    eraReq: BigNumber;
    lag: BigNumber;
  };
}

export interface LiquidStakingOldInterface extends utils.Interface {
  functions: {
    "DAPPS_STAKING()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DNTname()": FunctionFragment;
    "MANAGEMENT_FEE()": FunctionFragment;
    "MANAGER()": FunctionFragment;
    "REVENUE_FEE()": FunctionFragment;
    "UNSTAKING_FEE()": FunctionFragment;
    "addPartner(address)": FunctionFragment;
    "addStaker(address)": FunctionFragment;
    "addToBuffer(address,uint256)": FunctionFragment;
    "buffer(address,uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "claimingTxLimit()": FunctionFragment;
    "currentEra()": FunctionFragment;
    "distr()": FunctionFragment;
    "dntToken()": FunctionFragment;
    "eraRevenue(uint256)": FunctionFragment;
    "eraRewards(uint256)": FunctionFragment;
    "eraShot(address,string,string)": FunctionFragment;
    "eraShotsLimit()": FunctionFragment;
    "eraStakerReward(uint256)": FunctionFragment;
    "eraUnstaked(uint256)": FunctionFragment;
    "fillRewardPool()": FunctionFragment;
    "fillUnbonded()": FunctionFragment;
    "fillUnstaking()": FunctionFragment;
    "getPartners()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStakers()": FunctionFragment;
    "getUserLpTokens(address)": FunctionFragment;
    "getUserRewards(address)": FunctionFragment;
    "getUserWithdrawals()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(string,string,address,address)": FunctionFragment;
    "isLpToken(address)": FunctionFragment;
    "isPartner(address)": FunctionFragment;
    "isStaker(address)": FunctionFragment;
    "isUnstakes()": FunctionFragment;
    "lastClaimed()": FunctionFragment;
    "lastStaked()": FunctionFragment;
    "lastUnstaked()": FunctionFragment;
    "lastUpdated()": FunctionFragment;
    "lpHandlers(address)": FunctionFragment;
    "lpTokens(uint256)": FunctionFragment;
    "minStakeAmount()": FunctionFragment;
    "partnerIdx(address)": FunctionFragment;
    "partners(uint256)": FunctionFragment;
    "partnersLimit()": FunctionFragment;
    "removePartner(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "setBuffer(address,uint256)": FunctionFragment;
    "setEraShotsLimit(uint256)": FunctionFragment;
    "setMinStakeAmount(uint256)": FunctionFragment;
    "setPartnersLimit(uint256)": FunctionFragment;
    "setting()": FunctionFragment;
    "stake()": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "sum2unstake()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "sync(uint256)": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalRevenue()": FunctionFragment;
    "totalUserRewards(address)": FunctionFragment;
    "unbondedPool()": FunctionFragment;
    "unstake(uint256,bool)": FunctionFragment;
    "unstakingPool()": FunctionFragment;
    "usersShotsPerEra(address,uint256,uint256)": FunctionFragment;
    "utilName()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawBlock()": FunctionFragment;
    "withdrawRevenue(uint256)": FunctionFragment;
    "withdrawals(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DAPPS_STAKING"
      | "DEFAULT_ADMIN_ROLE"
      | "DNTname"
      | "MANAGEMENT_FEE"
      | "MANAGER"
      | "REVENUE_FEE"
      | "UNSTAKING_FEE"
      | "addPartner"
      | "addStaker"
      | "addToBuffer"
      | "buffer"
      | "claim"
      | "claimRewards"
      | "claimingTxLimit"
      | "currentEra"
      | "distr"
      | "dntToken"
      | "eraRevenue"
      | "eraRewards"
      | "eraShot"
      | "eraShotsLimit"
      | "eraStakerReward"
      | "eraUnstaked"
      | "fillRewardPool"
      | "fillUnbonded"
      | "fillUnstaking"
      | "getPartners"
      | "getRoleAdmin"
      | "getStakers"
      | "getUserLpTokens"
      | "getUserRewards"
      | "getUserWithdrawals"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isLpToken"
      | "isPartner"
      | "isStaker"
      | "isUnstakes"
      | "lastClaimed"
      | "lastStaked"
      | "lastUnstaked"
      | "lastUpdated"
      | "lpHandlers"
      | "lpTokens"
      | "minStakeAmount"
      | "partnerIdx"
      | "partners"
      | "partnersLimit"
      | "removePartner"
      | "renounceRole"
      | "revokeRole"
      | "rewardPool"
      | "setBuffer"
      | "setEraShotsLimit"
      | "setMinStakeAmount"
      | "setPartnersLimit"
      | "setting"
      | "stake"
      | "stakers"
      | "stakes"
      | "sum2unstake"
      | "supportsInterface"
      | "sync"
      | "totalBalance"
      | "totalRevenue"
      | "totalUserRewards"
      | "unbondedPool"
      | "unstake"
      | "unstakingPool"
      | "usersShotsPerEra"
      | "utilName"
      | "withdraw"
      | "withdrawBlock"
      | "withdrawRevenue"
      | "withdrawals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DAPPS_STAKING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DNTname", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MANAGEMENT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MANAGER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REVENUE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSTAKING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPartner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addStaker",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBuffer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buffer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimingTxLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEra",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "distr", values?: undefined): string;
  encodeFunctionData(functionFragment: "dntToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eraRevenue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "eraRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "eraShot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eraShotsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eraStakerReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "eraUnstaked",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillUnbonded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillUnstaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPartners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLpTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isLpToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPartner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isStaker",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnstakes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUnstaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpHandlers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "partnerIdx",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "partners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "partnersLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePartner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuffer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEraShotsLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinStakeAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnersLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "setting", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sum2unstake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sync",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUserRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondedPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usersShotsPerEra",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "utilName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRevenue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawals",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DAPPS_STAKING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DNTname", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MANAGEMENT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MANAGER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REVENUE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSTAKING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPartner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimingTxLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentEra", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dntToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eraRevenue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eraRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eraShot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eraShotsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eraStakerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eraUnstaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillUnbonded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillUnstaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPartners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserLpTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPartner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUnstakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUnstaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpHandlers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "partnerIdx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "partners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partnersLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEraShotsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartnersLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sum2unstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersShotsPerEra",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "utilName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;

  events: {
    "ClaimDappError(uint256,uint256,bytes)": EventFragment;
    "ClaimStakerError(uint256)": EventFragment;
    "Claimed(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "UnbondAndUnstakeError(uint256,uint256,bytes)": EventFragment;
    "Unstaked(address,uint256,bool)": EventFragment;
    "UpdateError(string)": EventFragment;
    "WithdrawUnbondedError(uint256,bytes)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimDappError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimStakerError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnbondAndUnstakeError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawUnbondedError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ClaimDappErrorEventObject {
  amount: BigNumber;
  era: BigNumber;
  reason: string;
}
export type ClaimDappErrorEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ClaimDappErrorEventObject
>;

export type ClaimDappErrorEventFilter = TypedEventFilter<ClaimDappErrorEvent>;

export interface ClaimStakerErrorEventObject {
  era: BigNumber;
}
export type ClaimStakerErrorEvent = TypedEvent<
  [BigNumber],
  ClaimStakerErrorEventObject
>;

export type ClaimStakerErrorEventFilter =
  TypedEventFilter<ClaimStakerErrorEvent>;

export interface ClaimedEventObject {
  user: string;
  amount: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakedEventObject {
  user: string;
  val: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnbondAndUnstakeErrorEventObject {
  sum2unstake: BigNumber;
  era: BigNumber;
  reason: string;
}
export type UnbondAndUnstakeErrorEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UnbondAndUnstakeErrorEventObject
>;

export type UnbondAndUnstakeErrorEventFilter =
  TypedEventFilter<UnbondAndUnstakeErrorEvent>;

export interface UnstakedEventObject {
  user: string;
  amount: BigNumber;
  immediate: boolean;
}
export type UnstakedEvent = TypedEvent<
  [string, BigNumber, boolean],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface UpdateErrorEventObject {
  reason: string;
}
export type UpdateErrorEvent = TypedEvent<[string], UpdateErrorEventObject>;

export type UpdateErrorEventFilter = TypedEventFilter<UpdateErrorEvent>;

export interface WithdrawUnbondedErrorEventObject {
  _era: BigNumber;
  reason: string;
}
export type WithdrawUnbondedErrorEvent = TypedEvent<
  [BigNumber, string],
  WithdrawUnbondedErrorEventObject
>;

export type WithdrawUnbondedErrorEventFilter =
  TypedEventFilter<WithdrawUnbondedErrorEvent>;

export interface WithdrawnEventObject {
  user: string;
  val: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface LiquidStakingOld extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidStakingOldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAPPS_STAKING(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DNTname(overrides?: CallOverrides): Promise<[string]>;

    MANAGEMENT_FEE(overrides?: CallOverrides): Promise<[number]>;

    MANAGER(overrides?: CallOverrides): Promise<[string]>;

    REVENUE_FEE(overrides?: CallOverrides): Promise<[number]>;

    UNSTAKING_FEE(overrides?: CallOverrides): Promise<[number]>;

    addPartner(
      _partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addStaker(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToBuffer(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buffer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimingTxLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEra(overrides?: CallOverrides): Promise<[BigNumber]>;

    distr(overrides?: CallOverrides): Promise<[string]>;

    dntToken(overrides?: CallOverrides): Promise<[string]>;

    eraRevenue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { done: boolean; val: BigNumber }>;

    eraRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eraShot(
      _user: PromiseOrValue<string>,
      _util: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eraShotsLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    eraStakerReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { done: boolean; val: BigNumber }>;

    eraUnstaked(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { done: boolean; val: BigNumber }>;

    fillRewardPool(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillUnbonded(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillUnstaking(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPartners(overrides?: CallOverrides): Promise<[string[]]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStakers(overrides?: CallOverrides): Promise<[string[]]>;

    getUserLpTokens(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getUserRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserWithdrawals(
      overrides?: CallOverrides
    ): Promise<[LiquidStakingOld.WithdrawalStructOutput[]]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _DNTname: PromiseOrValue<string>,
      _utilName: PromiseOrValue<string>,
      _distrAddr: PromiseOrValue<string>,
      _dntToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isLpToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPartner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isStaker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUnstakes(overrides?: CallOverrides): Promise<[boolean]>;

    lastClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUnstaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdated(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpHandlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lpTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    minStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    partnerIdx(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    partners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    partnersLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    removePartner(
      _partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBuffer(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEraShotsLimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinStakeAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPartnersLimit(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalBalance: BigNumber;
        eraStarted: BigNumber;
      }
    >;

    sum2unstake(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sync(
      _era: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRevenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUserRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unbondedPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      _amount: PromiseOrValue<BigNumberish>,
      _immediate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakingPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    usersShotsPerEra(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    utilName(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawRevenue(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        val: BigNumber;
        eraReq: BigNumber;
        lag: BigNumber;
      }
    >;
  };

  DAPPS_STAKING(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DNTname(overrides?: CallOverrides): Promise<string>;

  MANAGEMENT_FEE(overrides?: CallOverrides): Promise<number>;

  MANAGER(overrides?: CallOverrides): Promise<string>;

  REVENUE_FEE(overrides?: CallOverrides): Promise<number>;

  UNSTAKING_FEE(overrides?: CallOverrides): Promise<number>;

  addPartner(
    _partner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addStaker(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToBuffer(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buffer(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimingTxLimit(overrides?: CallOverrides): Promise<BigNumber>;

  currentEra(overrides?: CallOverrides): Promise<BigNumber>;

  distr(overrides?: CallOverrides): Promise<string>;

  dntToken(overrides?: CallOverrides): Promise<string>;

  eraRevenue(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { done: boolean; val: BigNumber }>;

  eraRewards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eraShot(
    _user: PromiseOrValue<string>,
    _util: PromiseOrValue<string>,
    _dnt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eraShotsLimit(overrides?: CallOverrides): Promise<BigNumber>;

  eraStakerReward(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { done: boolean; val: BigNumber }>;

  eraUnstaked(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { done: boolean; val: BigNumber }>;

  fillRewardPool(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillUnbonded(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillUnstaking(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPartners(overrides?: CallOverrides): Promise<string[]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakers(overrides?: CallOverrides): Promise<string[]>;

  getUserLpTokens(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserRewards(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserWithdrawals(
    overrides?: CallOverrides
  ): Promise<LiquidStakingOld.WithdrawalStructOutput[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _DNTname: PromiseOrValue<string>,
    _utilName: PromiseOrValue<string>,
    _distrAddr: PromiseOrValue<string>,
    _dntToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isLpToken(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPartner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isStaker(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUnstakes(overrides?: CallOverrides): Promise<boolean>;

  lastClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  lastStaked(overrides?: CallOverrides): Promise<BigNumber>;

  lastUnstaked(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

  lpHandlers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  lpTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  minStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  partnerIdx(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  partners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  partnersLimit(overrides?: CallOverrides): Promise<BigNumber>;

  removePartner(
    _partner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    _role: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    _role: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

  setBuffer(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEraShotsLimit(
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinStakeAmount(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPartnersLimit(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setting(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stakes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { totalBalance: BigNumber; eraStarted: BigNumber }
  >;

  sum2unstake(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sync(
    _era: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalRevenue(overrides?: CallOverrides): Promise<BigNumber>;

  totalUserRewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unbondedPool(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    _amount: PromiseOrValue<BigNumberish>,
    _immediate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakingPool(overrides?: CallOverrides): Promise<BigNumber>;

  usersShotsPerEra(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  utilName(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBlock(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawRevenue(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      val: BigNumber;
      eraReq: BigNumber;
      lag: BigNumber;
    }
  >;

  callStatic: {
    DAPPS_STAKING(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DNTname(overrides?: CallOverrides): Promise<string>;

    MANAGEMENT_FEE(overrides?: CallOverrides): Promise<number>;

    MANAGER(overrides?: CallOverrides): Promise<string>;

    REVENUE_FEE(overrides?: CallOverrides): Promise<number>;

    UNSTAKING_FEE(overrides?: CallOverrides): Promise<number>;

    addPartner(
      _partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addStaker(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToBuffer(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buffer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    claimingTxLimit(overrides?: CallOverrides): Promise<BigNumber>;

    currentEra(overrides?: CallOverrides): Promise<BigNumber>;

    distr(overrides?: CallOverrides): Promise<string>;

    dntToken(overrides?: CallOverrides): Promise<string>;

    eraRevenue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { done: boolean; val: BigNumber }>;

    eraRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eraShot(
      _user: PromiseOrValue<string>,
      _util: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    eraShotsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    eraStakerReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { done: boolean; val: BigNumber }>;

    eraUnstaked(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { done: boolean; val: BigNumber }>;

    fillRewardPool(overrides?: CallOverrides): Promise<void>;

    fillUnbonded(overrides?: CallOverrides): Promise<void>;

    fillUnstaking(overrides?: CallOverrides): Promise<void>;

    getPartners(overrides?: CallOverrides): Promise<string[]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakers(overrides?: CallOverrides): Promise<string[]>;

    getUserLpTokens(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserWithdrawals(
      overrides?: CallOverrides
    ): Promise<LiquidStakingOld.WithdrawalStructOutput[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _DNTname: PromiseOrValue<string>,
      _utilName: PromiseOrValue<string>,
      _distrAddr: PromiseOrValue<string>,
      _dntToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isLpToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPartner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isStaker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUnstakes(overrides?: CallOverrides): Promise<boolean>;

    lastClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    lastStaked(overrides?: CallOverrides): Promise<BigNumber>;

    lastUnstaked(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    lpHandlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    lpTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    minStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    partnerIdx(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    partnersLimit(overrides?: CallOverrides): Promise<BigNumber>;

    removePartner(
      _partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    setBuffer(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEraShotsLimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinStakeAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartnersLimit(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setting(overrides?: CallOverrides): Promise<void>;

    stake(overrides?: CallOverrides): Promise<void>;

    stakers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalBalance: BigNumber;
        eraStarted: BigNumber;
      }
    >;

    sum2unstake(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sync(
      _era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbondedPool(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _amount: PromiseOrValue<BigNumberish>,
      _immediate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakingPool(overrides?: CallOverrides): Promise<BigNumber>;

    usersShotsPerEra(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilName(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBlock(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRevenue(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        val: BigNumber;
        eraReq: BigNumber;
        lag: BigNumber;
      }
    >;
  };

  filters: {
    "ClaimDappError(uint256,uint256,bytes)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      era?: PromiseOrValue<BigNumberish> | null,
      reason?: PromiseOrValue<BytesLike> | null
    ): ClaimDappErrorEventFilter;
    ClaimDappError(
      amount?: PromiseOrValue<BigNumberish> | null,
      era?: PromiseOrValue<BigNumberish> | null,
      reason?: PromiseOrValue<BytesLike> | null
    ): ClaimDappErrorEventFilter;

    "ClaimStakerError(uint256)"(
      era?: PromiseOrValue<BigNumberish> | null
    ): ClaimStakerErrorEventFilter;
    ClaimStakerError(
      era?: PromiseOrValue<BigNumberish> | null
    ): ClaimStakerErrorEventFilter;

    "Claimed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimedEventFilter;
    Claimed(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Staked(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      val?: null
    ): StakedEventFilter;
    Staked(user?: PromiseOrValue<string> | null, val?: null): StakedEventFilter;

    "UnbondAndUnstakeError(uint256,uint256,bytes)"(
      sum2unstake?: PromiseOrValue<BigNumberish> | null,
      era?: PromiseOrValue<BigNumberish> | null,
      reason?: PromiseOrValue<BytesLike> | null
    ): UnbondAndUnstakeErrorEventFilter;
    UnbondAndUnstakeError(
      sum2unstake?: PromiseOrValue<BigNumberish> | null,
      era?: PromiseOrValue<BigNumberish> | null,
      reason?: PromiseOrValue<BytesLike> | null
    ): UnbondAndUnstakeErrorEventFilter;

    "Unstaked(address,uint256,bool)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      immediate?: null
    ): UnstakedEventFilter;
    Unstaked(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      immediate?: null
    ): UnstakedEventFilter;

    "UpdateError(string)"(
      reason?: PromiseOrValue<string> | null
    ): UpdateErrorEventFilter;
    UpdateError(reason?: PromiseOrValue<string> | null): UpdateErrorEventFilter;

    "WithdrawUnbondedError(uint256,bytes)"(
      _era?: PromiseOrValue<BigNumberish> | null,
      reason?: PromiseOrValue<BytesLike> | null
    ): WithdrawUnbondedErrorEventFilter;
    WithdrawUnbondedError(
      _era?: PromiseOrValue<BigNumberish> | null,
      reason?: PromiseOrValue<BytesLike> | null
    ): WithdrawUnbondedErrorEventFilter;

    "Withdrawn(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      val?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: PromiseOrValue<string> | null,
      val?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    DAPPS_STAKING(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DNTname(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGEMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    REVENUE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    UNSTAKING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addPartner(
      _partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addStaker(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToBuffer(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buffer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimingTxLimit(overrides?: CallOverrides): Promise<BigNumber>;

    currentEra(overrides?: CallOverrides): Promise<BigNumber>;

    distr(overrides?: CallOverrides): Promise<BigNumber>;

    dntToken(overrides?: CallOverrides): Promise<BigNumber>;

    eraRevenue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eraRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eraShot(
      _user: PromiseOrValue<string>,
      _util: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eraShotsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    eraStakerReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eraUnstaked(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillRewardPool(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillUnbonded(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillUnstaking(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPartners(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakers(overrides?: CallOverrides): Promise<BigNumber>;

    getUserLpTokens(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _DNTname: PromiseOrValue<string>,
      _utilName: PromiseOrValue<string>,
      _distrAddr: PromiseOrValue<string>,
      _dntToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isLpToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStaker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnstakes(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    lastStaked(overrides?: CallOverrides): Promise<BigNumber>;

    lastUnstaked(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    lpHandlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    partnerIdx(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partnersLimit(overrides?: CallOverrides): Promise<BigNumber>;

    removePartner(
      _partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    setBuffer(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEraShotsLimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinStakeAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPartnersLimit(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sum2unstake(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sync(
      _era: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbondedPool(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _amount: PromiseOrValue<BigNumberish>,
      _immediate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakingPool(overrides?: CallOverrides): Promise<BigNumber>;

    usersShotsPerEra(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilName(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBlock(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRevenue(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAPPS_STAKING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DNTname(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGEMENT_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVENUE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNSTAKING_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPartner(
      _partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addStaker(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToBuffer(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buffer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimingTxLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEra(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dntToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eraRevenue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eraRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eraShot(
      _user: PromiseOrValue<string>,
      _util: PromiseOrValue<string>,
      _dnt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eraShotsLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eraStakerReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eraUnstaked(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillRewardPool(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillUnbonded(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillUnstaking(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPartners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserLpTokens(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserWithdrawals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _DNTname: PromiseOrValue<string>,
      _utilName: PromiseOrValue<string>,
      _distrAddr: PromiseOrValue<string>,
      _dntToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isLpToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStaker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnstakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUnstaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpHandlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partnerIdx(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partnersLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePartner(
      _partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBuffer(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEraShotsLimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinStakeAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPartnersLimit(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sum2unstake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sync(
      _era: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRevenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUserRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unbondedPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      _amount: PromiseOrValue<BigNumberish>,
      _immediate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usersShotsPerEra(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawRevenue(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
