/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface DappsStakingInterface extends utils.Interface {
  functions: {
    "bond_and_stake(address,uint128)": FunctionFragment;
    "claim_dapp(address,uint128)": FunctionFragment;
    "claim_staker(address)": FunctionFragment;
    "nomination_transfer(address,uint128,address)": FunctionFragment;
    "read_contract_stake(address)": FunctionFragment;
    "read_current_era()": FunctionFragment;
    "read_era_reward(uint32)": FunctionFragment;
    "read_era_staked(uint32)": FunctionFragment;
    "read_staked_amount(bytes)": FunctionFragment;
    "read_staked_amount_on_contract(address,bytes)": FunctionFragment;
    "read_unbonding_period()": FunctionFragment;
    "register(address)": FunctionFragment;
    "set_reward_destination(uint8)": FunctionFragment;
    "unbond_and_unstake(address,uint128)": FunctionFragment;
    "withdraw_from_unregistered(address)": FunctionFragment;
    "withdraw_unbonded()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bond_and_stake"
      | "claim_dapp"
      | "claim_staker"
      | "nomination_transfer"
      | "read_contract_stake"
      | "read_current_era"
      | "read_era_reward"
      | "read_era_staked"
      | "read_staked_amount"
      | "read_staked_amount_on_contract"
      | "read_unbonding_period"
      | "register"
      | "set_reward_destination"
      | "unbond_and_unstake"
      | "withdraw_from_unregistered"
      | "withdraw_unbonded"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bond_and_stake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_dapp",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_staker",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nomination_transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "read_contract_stake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "read_current_era",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "read_era_reward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "read_era_staked",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "read_staked_amount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "read_staked_amount_on_contract",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "read_unbonding_period",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_reward_destination",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond_and_unstake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_from_unregistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_unbonded",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bond_and_stake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim_dapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claim_staker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nomination_transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "read_contract_stake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "read_current_era",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "read_era_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "read_era_staked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "read_staked_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "read_staked_amount_on_contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "read_unbonding_period",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_reward_destination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbond_and_unstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_from_unregistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_unbonded",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DappsStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DappsStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bond_and_stake(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim_dapp(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim_staker(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nomination_transfer(
      origin_smart_contract: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target_smart_contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    read_contract_stake(
      contract_id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    read_current_era(overrides?: CallOverrides): Promise<[BigNumber]>;

    read_era_reward(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    read_era_staked(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    read_staked_amount(
      staker: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    read_staked_amount_on_contract(
      contract_id: PromiseOrValue<string>,
      staker: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    read_unbonding_period(overrides?: CallOverrides): Promise<[BigNumber]>;

    register(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_reward_destination(
      reward_destination: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unbond_and_unstake(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw_from_unregistered(
      smart_contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw_unbonded(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bond_and_stake(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim_dapp(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim_staker(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nomination_transfer(
    origin_smart_contract: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target_smart_contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  read_contract_stake(
    contract_id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  read_current_era(overrides?: CallOverrides): Promise<BigNumber>;

  read_era_reward(
    era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  read_era_staked(
    era: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  read_staked_amount(
    staker: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  read_staked_amount_on_contract(
    contract_id: PromiseOrValue<string>,
    staker: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  read_unbonding_period(overrides?: CallOverrides): Promise<BigNumber>;

  register(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_reward_destination(
    reward_destination: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unbond_and_unstake(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw_from_unregistered(
    smart_contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw_unbonded(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bond_and_stake(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim_dapp(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim_staker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nomination_transfer(
      origin_smart_contract: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target_smart_contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    read_contract_stake(
      contract_id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_current_era(overrides?: CallOverrides): Promise<BigNumber>;

    read_era_reward(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_era_staked(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_staked_amount(
      staker: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_staked_amount_on_contract(
      contract_id: PromiseOrValue<string>,
      staker: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_unbonding_period(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_reward_destination(
      reward_destination: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unbond_and_unstake(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw_from_unregistered(
      smart_contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw_unbonded(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bond_and_stake(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim_dapp(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim_staker(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nomination_transfer(
      origin_smart_contract: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target_smart_contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    read_contract_stake(
      contract_id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_current_era(overrides?: CallOverrides): Promise<BigNumber>;

    read_era_reward(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_era_staked(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_staked_amount(
      staker: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_staked_amount_on_contract(
      contract_id: PromiseOrValue<string>,
      staker: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read_unbonding_period(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_reward_destination(
      reward_destination: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unbond_and_unstake(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw_from_unregistered(
      smart_contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw_unbonded(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bond_and_stake(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim_dapp(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim_staker(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nomination_transfer(
      origin_smart_contract: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target_smart_contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    read_contract_stake(
      contract_id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    read_current_era(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    read_era_reward(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    read_era_staked(
      era: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    read_staked_amount(
      staker: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    read_staked_amount_on_contract(
      contract_id: PromiseOrValue<string>,
      staker: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    read_unbonding_period(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_reward_destination(
      reward_destination: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unbond_and_unstake(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw_from_unregistered(
      smart_contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw_unbonded(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
